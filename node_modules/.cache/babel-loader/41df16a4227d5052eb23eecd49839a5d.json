{"ast":null,"code":"'use strict';\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nconst SubscriptionTracker = require('./subscription-tracker');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n */\n\n\nmodule.exports = configure((api, options) => {\n  const subsTracker = SubscriptionTracker.singleton();\n  /**\n   * @type {PubsubAPI[\"subscribe\"]}\n   */\n\n  async function subscribe(topic, handler, options = {}) {\n    // eslint-disable-line require-await\n    options.signal = subsTracker.subscribe(topic, handler, options.signal);\n    /** @type {(value?: any) => void} */\n\n    let done;\n    /** @type {(error: Error) => void} */\n\n    let fail;\n    const result = new Promise((resolve, reject) => {\n      done = resolve;\n      fail = reject;\n    }); // In Firefox, the initial call to fetch does not resolve until some data\n    // is received. If this doesn't happen within 1 second assume success\n\n    const ffWorkaround = setTimeout(() => done(), 1000); // Do this async to not block Firefox\n\n    setTimeout(() => {\n      api.post('pubsub/sub', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        // Initial subscribe fail, ensure we clean up\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n\n        if (!response) {\n          // if there was no response, the subscribe failed\n          return;\n        }\n\n        readMessages(response.ndjson(), {\n          onMessage: handler,\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n    }, 0);\n    return result;\n  }\n\n  return subscribe;\n});\n/**\n * @param {*} msgStream\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\n\nasync function readMessages(msgStream, {\n  onMessage,\n  onEnd,\n  onError\n}) {\n  onError = onError || log;\n\n  try {\n    for await (const msg of msgStream) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg); // Not fatal\n      }\n    }\n  } catch (err) {\n    // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n    // Temporarily use the name property instead.\n    if (err.type !== 'aborted' && err.name !== 'AbortError') {\n      onError(err, true); // Fatal\n    }\n  } finally {\n    onEnd();\n  }\n}","map":{"version":3,"sources":["/home/danielmelchor/Documents/CodeProjects/Decentrapass/Website/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"names":["uint8ArrayFromString","require","uint8ArrayToString","log","SubscriptionTracker","configure","toUrlSearchParams","module","exports","api","options","subsTracker","singleton","subscribe","topic","handler","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","timeout","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","ndjson","onMessage","onEnd","onError","msgStream","msg","from","data","seqno","topicIDs","message","type","name"],"mappings":"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","sourcesContent":["'use strict'\n\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\nconst SubscriptionTracker = require('./subscription-tracker')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n */\n\nmodule.exports = configure((api, options) => {\n  const subsTracker = SubscriptionTracker.singleton()\n\n  /**\n   * @type {PubsubAPI[\"subscribe\"]}\n   */\n  async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n    options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n    /** @type {(value?: any) => void} */\n    let done\n    /** @type {(error: Error) => void} */\n    let fail\n\n    const result = new Promise((resolve, reject) => {\n      done = resolve\n      fail = reject\n    })\n\n    // In Firefox, the initial call to fetch does not resolve until some data\n    // is received. If this doesn't happen within 1 second assume success\n    const ffWorkaround = setTimeout(() => done(), 1000)\n\n    // Do this async to not block Firefox\n    setTimeout(() => {\n      api.post('pubsub/sub', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response.ndjson(), {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n    }, 0)\n\n    return result\n  }\n  return subscribe\n})\n\n/**\n * @param {*} msgStream\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (msgStream, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of msgStream) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        })\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err) {\n    // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n    // Temporarily use the name property instead.\n    if (err.type !== 'aborted' && err.name !== 'AbortError') {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}