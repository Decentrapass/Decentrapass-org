{"ast":null,"code":"import { DO_NOT_DECRYPT } from \"../components/Constants/constants\";\nimport { formatCard } from \"./format\";\n\nvar CryptoJS = require(\"crypto-js\");\n\nexport function hash(pass, acc) {\n  pass = CryptoJS.enc.Base64.parse(pass);\n  acc = CryptoJS.enc.Base64.parse(acc);\n  let comb = CryptoJS.HmacSHA512(pass, acc);\n  let pbkdf2 = CryptoJS.PBKDF2(comb, acc, {\n    keySize: 512 / 32,\n    iterations: 5000\n  });\n  return CryptoJS.enc.Hex.stringify(pbkdf2);\n}\nexport function decrypt(data, pass) {\n  for (let i = 0; i < data.length; i++) {\n    for (var key in data[i]) {\n      // Avoids encrypting data like dates or pk\n      if (data[i][key] !== \"\" && !DO_NOT_DECRYPT.includes(key)) data[i][key] = CryptoJS.AES.decrypt(data[i][key], pass).toString(CryptoJS.enc.Utf8);\n      if (key === \"number\" && data[i][\"type\"] === \"card\") data[i][key] = formatCard(data[i][key]);\n    }\n  }\n\n  return data;\n}\nexport function encrypt(object, pass) {\n  for (var key in object) {\n    if (object[key] !== \"\" && key !== \"type\" && key !== \"salt\" && key !== \"hash\" && key !== \"pk\") object[key] = CryptoJS.AES.encrypt(object[key], pass).toString();\n  }\n\n  return object;\n}","map":{"version":3,"sources":["/home/danielmelchor/Documents/CodeProjects/Decentrapass/Website/src/functions/encryption.js"],"names":["DO_NOT_DECRYPT","formatCard","CryptoJS","require","hash","pass","acc","enc","Base64","parse","comb","HmacSHA512","pbkdf2","PBKDF2","keySize","iterations","Hex","stringify","decrypt","data","i","length","key","includes","AES","toString","Utf8","encrypt","object"],"mappings":"AAAA,SAASA,cAAT,QAA+B,mCAA/B;AACA,SAASC,UAAT,QAA2B,UAA3B;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,OAAO,SAASC,IAAT,CAAcC,IAAd,EAAoBC,GAApB,EAAyB;AAC9BD,EAAAA,IAAI,GAAGH,QAAQ,CAACK,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0BJ,IAA1B,CAAP;AACAC,EAAAA,GAAG,GAAGJ,QAAQ,CAACK,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0BH,GAA1B,CAAN;AAEA,MAAII,IAAI,GAAGR,QAAQ,CAACS,UAAT,CAAoBN,IAApB,EAA0BC,GAA1B,CAAX;AAEA,MAAIM,MAAM,GAAGV,QAAQ,CAACW,MAAT,CAAgBH,IAAhB,EAAsBJ,GAAtB,EAA2B;AACtCQ,IAAAA,OAAO,EAAE,MAAM,EADuB;AAEtCC,IAAAA,UAAU,EAAE;AAF0B,GAA3B,CAAb;AAKA,SAAOb,QAAQ,CAACK,GAAT,CAAaS,GAAb,CAAiBC,SAAjB,CAA2BL,MAA3B,CAAP;AACD;AAED,OAAO,SAASM,OAAT,CAAiBC,IAAjB,EAAuBd,IAAvB,EAA6B;AAClC,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIE,GAAT,IAAgBH,IAAI,CAACC,CAAD,CAApB,EAAyB;AACvB;AACA,UAAID,IAAI,CAACC,CAAD,CAAJ,CAAQE,GAAR,MAAiB,EAAjB,IAAuB,CAACtB,cAAc,CAACuB,QAAf,CAAwBD,GAAxB,CAA5B,EACEH,IAAI,CAACC,CAAD,CAAJ,CAAQE,GAAR,IAAepB,QAAQ,CAACsB,GAAT,CAAaN,OAAb,CAAqBC,IAAI,CAACC,CAAD,CAAJ,CAAQE,GAAR,CAArB,EAAmCjB,IAAnC,EAAyCoB,QAAzC,CACbvB,QAAQ,CAACK,GAAT,CAAamB,IADA,CAAf;AAIF,UAAIJ,GAAG,KAAK,QAAR,IAAoBH,IAAI,CAACC,CAAD,CAAJ,CAAQ,MAAR,MAAoB,MAA5C,EACED,IAAI,CAACC,CAAD,CAAJ,CAAQE,GAAR,IAAerB,UAAU,CAACkB,IAAI,CAACC,CAAD,CAAJ,CAAQE,GAAR,CAAD,CAAzB;AACH;AACF;;AACD,SAAOH,IAAP;AACD;AAED,OAAO,SAASQ,OAAT,CAAiBC,MAAjB,EAAyBvB,IAAzB,EAA+B;AACpC,OAAK,IAAIiB,GAAT,IAAgBM,MAAhB,EAAwB;AACtB,QACEA,MAAM,CAACN,GAAD,CAAN,KAAgB,EAAhB,IACAA,GAAG,KAAK,MADR,IAEAA,GAAG,KAAK,MAFR,IAGAA,GAAG,KAAK,MAHR,IAIAA,GAAG,KAAK,IALV,EAOEM,MAAM,CAACN,GAAD,CAAN,GAAcpB,QAAQ,CAACsB,GAAT,CAAaG,OAAb,CAAqBC,MAAM,CAACN,GAAD,CAA3B,EAAkCjB,IAAlC,EAAwCoB,QAAxC,EAAd;AACH;;AACD,SAAOG,MAAP;AACD","sourcesContent":["import { DO_NOT_DECRYPT } from \"../components/Constants/constants\";\nimport { formatCard } from \"./format\";\n\nvar CryptoJS = require(\"crypto-js\");\n\nexport function hash(pass, acc) {\n  pass = CryptoJS.enc.Base64.parse(pass);\n  acc = CryptoJS.enc.Base64.parse(acc);\n\n  let comb = CryptoJS.HmacSHA512(pass, acc);\n\n  let pbkdf2 = CryptoJS.PBKDF2(comb, acc, {\n    keySize: 512 / 32,\n    iterations: 5000,\n  });\n\n  return CryptoJS.enc.Hex.stringify(pbkdf2);\n}\n\nexport function decrypt(data, pass) {\n  for (let i = 0; i < data.length; i++) {\n    for (var key in data[i]) {\n      // Avoids encrypting data like dates or pk\n      if (data[i][key] !== \"\" && !DO_NOT_DECRYPT.includes(key))\n        data[i][key] = CryptoJS.AES.decrypt(data[i][key], pass).toString(\n          CryptoJS.enc.Utf8\n        );\n\n      if (key === \"number\" && data[i][\"type\"] === \"card\")\n        data[i][key] = formatCard(data[i][key]);\n    }\n  }\n  return data;\n}\n\nexport function encrypt(object, pass) {\n  for (var key in object) {\n    if (\n      object[key] !== \"\" &&\n      key !== \"type\" &&\n      key !== \"salt\" &&\n      key !== \"hash\" &&\n      key !== \"pk\"\n    )\n      object[key] = CryptoJS.AES.encrypt(object[key], pass).toString();\n  }\n  return object;\n}\n"]},"metadata":{},"sourceType":"module"}